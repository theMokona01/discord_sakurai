"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("graceful-fs");
const YAML = require("json2yaml");
const slice = Array.prototype.slice;
const LOG_FILENAME = 'pnpm-debug.log';
function default_1(streamParser) {
    const logs = [];
    streamParser['on']('data', function (logObj) {
        if (isUsefulLog(logObj)) {
            logs.push(logObj);
        }
    });
    process.on('exit', (code) => {
        if (code === 0) {
            // it might not exist, so it is OK if it fails
            try {
                fs.unlinkSync(LOG_FILENAME);
            }
            catch (err) { }
            return;
        }
        const prettyLogs = getPrettyLogs();
        const yamlLogs = YAML.stringify(prettyLogs);
        fs.writeFileSync(LOG_FILENAME, yamlLogs, 'UTF8');
    });
    function getPrettyLogs() {
        const prettyLogs = {};
        logs.forEach((logObj, i) => {
            const key = `${i} ${logObj['level']} ${logObj['name']}`;
            const msgobj = getMessageObj(logObj);
            prettyLogs[key] = prettify(msgobj);
        });
        return prettyLogs;
    }
    function getMessageObj(logobj) {
        const msgobj = {};
        for (let key in logobj) {
            if (['time', 'hostname', 'pid', 'level', 'name'].indexOf(key) !== -1)
                continue;
            msgobj[key] = logobj[key];
        }
        return msgobj;
    }
    function prettify(obj) {
        if (obj instanceof Error) {
            let logMsg = obj.toString();
            if (obj.stack) {
                logMsg += `\n${obj.stack}`;
            }
            return logMsg;
        }
        if (Object.keys(obj).length === 1 && obj['message'])
            return obj['message'];
        return obj;
    }
}
exports.default = default_1;
function isUsefulLog(logObj) {
    return logObj['name'] !== 'pnpm:progress' || logObj['status'] !== 'downloading';
}
//# sourceMappingURL=index.js.map