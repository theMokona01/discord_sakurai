"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
const mkdirp = require("mkdirp-promise");
const path = require("path");
const lockfile = require("proper-lockfile");
function delay(ms) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => setTimeout(resolve, ms));
    });
}
function lock(lockFilename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const unlockThis = () => unlock(lockFilename);
        unlockThis['sync'] = () => lockfile.unlockSync(lockFilename, { realpath: false }); // tslint:disable-line
        const promise = new Promise((resolve, reject) => {
            lockfile.lock(lockFilename, { realpath: false, stale: opts.stale }, (err) => __awaiter(this, void 0, void 0, function* () {
                if (err && err.code === 'ELOCKED') {
                    if (opts.firstTime && opts.whenLocked) {
                        opts.whenLocked();
                    }
                    yield delay(200);
                    yield lock(lockFilename, { firstTime: false, stale: opts.stale, whenLocked: opts.whenLocked });
                    resolve(unlockThis);
                }
                else if (err) {
                    reject(err);
                }
                else {
                    resolve(unlockThis);
                }
            }));
        });
        return promise;
    });
}
function unlock(lockFilename) {
    return __awaiter(this, void 0, void 0, function* () {
        const promise = new Promise((resolve) => lockfile.unlock(lockFilename, { realpath: false }, resolve));
        return promise;
    });
}
function withLock(dir, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        dir = path.resolve(dir);
        yield mkdirp(opts.locks);
        const lockFilename = path.join(opts.locks, crypto.createHash('sha1').update(dir).digest('hex'));
        return yield lock(lockFilename, { firstTime: true, stale: opts.stale, whenLocked: opts.whenLocked });
    });
}
exports.default = withLock;
//# sourceMappingURL=index.js.map