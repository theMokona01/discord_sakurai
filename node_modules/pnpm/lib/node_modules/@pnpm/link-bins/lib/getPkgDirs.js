"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const flatten = require("arr-flatten");
const fs = require("mz/fs");
const pFilter = require("p-filter");
const path = require("path");
async function default_1(modules, warn) {
    const dirs = await getDirectories(modules, warn);
    const subdirs = await Promise.all(dirs.map((dir) => {
        return isScopedPkgsDir(dir) ? getDirectories(dir, warn) : Promise.resolve([dir]);
    }));
    return flatten(subdirs);
}
exports.default = default_1;
async function getDirectories(srcPath, warn) {
    let dirs;
    try {
        dirs = await fs.readdir(srcPath);
    }
    catch (err) {
        if (err.code !== 'ENOENT') {
            throw err;
        }
        dirs = [];
    }
    return pFilter(dirs
        .filter((relativePath) => relativePath[0] !== '.') // ignore directories like .bin, .store, etc
        .map((relativePath) => path.join(srcPath, relativePath)), async (absolutePath) => {
        try {
            const stats = await fs.stat(absolutePath);
            return stats.isDirectory();
        }
        catch (err) {
            if (err.code !== 'ENOENT')
                throw err;
            warn(`Cannot find file at ${absolutePath} although it was listed by readdir`);
            return false;
        }
    });
}
function isScopedPkgsDir(dirPath) {
    return path.basename(dirPath)[0] === '@';
}
//# sourceMappingURL=getPkgDirs.js.map