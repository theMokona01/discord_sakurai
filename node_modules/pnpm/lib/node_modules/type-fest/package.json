{
  "_args": [
    [
      {
        "raw": "type-fest@^0.3.0",
        "scope": null,
        "escapedName": "type-fest",
        "name": "type-fest",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/home/zoltan/src/pnpm/pnpm/packages/pnpm/node_modules/load-json-file"
    ]
  ],
  "_from": "type-fest@^0.3.0",
  "_hasShrinkwrap": false,
  "_id": "type-fest@0.3.1",
  "_location": "/type-fest",
  "_nodeVersion": "10.15.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/type-fest_0.3.1_1554865513441_0.31540399343283054"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "type-fest@^0.3.0",
    "scope": null,
    "escapedName": "type-fest",
    "name": "type-fest",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/get-port",
    "/load-json-file"
  ],
  "_resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.3.1.tgz",
  "_shasum": "63d00d204e059474fe5e1b7c011112bbd1dc29e1",
  "_shrinkwrap": null,
  "_spec": "type-fest@^0.3.0",
  "_where": "/home/zoltan/src/pnpm/pnpm/packages/pnpm/node_modules/load-json-file",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/type-fest/issues"
  },
  "dependencies": {},
  "description": "A collection of essential TypeScript types",
  "devDependencies": {
    "@sindresorhus/tsconfig": "^0.3.0",
    "@typescript-eslint/eslint-plugin": "^1.5.0",
    "eslint-config-xo-typescript": "^0.9.0",
    "tsd": "^0.7.2",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cUGJnCdr4STbePCgqNFbpVNCepa+kAVohJs1sLhxzdH+gnEoOd8VhbYa7pD3zZYGiURWM2xzEII3fQcRizDkYQ==",
    "shasum": "63d00d204e059474fe5e1b7c011112bbd1dc29e1",
    "tarball": "https://registry.npmjs.org/type-fest/-/type-fest-0.3.1.tgz",
    "fileCount": 5,
    "unpackedSize": 23012,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrV1qCRA9TVsSAnZWagAAjNkP/0Dz021lGx6kz5+RjFT2\nk1eBotK+urY/evI+23g78MfIt9mxz0xrBe4AdsOlnziSY337BloFWZsh9w6p\nMnjVaMK4b4GEaRBei8scKHjDEO+OZP0APYZvNeX9dplKvPH7KCkl2C8UnlE3\nj+KAErQy9SvaxV0GYQ95gUjASADUsckZyK7tvuAm/FttDIfFQQk88VvZmUkD\n1UlCii9vsiglCQXAWrpMwWHcl0sLCjgxlqnKkujl+QvDKRyaQxKv5ZDxKVfv\nNg2VcnTZi6nkkKFzegrvKOHmjhIR423TYMs92HxjGbdpbFaU5kLt/817Wzhp\ngu9efY7p4pnWRiAQh6X06ArTtfOxh2U7VY8VqGjkqVAhVQ7sbH0J8E1uu/O6\ns2sg5OFCIvtbWeg5w/ZTC+6mQ74n3hBj0oLIQZExmshTf4BnE+aCUo6zw6aE\nW7EdO9FKMA6vyvQ/xUrwurEd249jthOuxa3ix2iuHevQ4LtDB8+m0/+zgNC8\nDWLkAiwFZLedR/85GVwITzeA/bfVVEzhl3JXNrbcMN1fYqRlG1sBqy94L4q9\ngsEPwUG4VvkunQiVGtUkERvJdCq7PfmBG9rOJzVmw27e8bUXCUhse0OdelJG\nJ+3uq7pI+tQFUrXTrTHnom8HuKPfOySzA0JPHheG9OazFRL1kMZ0s/MzU3oE\nsl/m\r\n=M2BB\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.d.ts",
    "source"
  ],
  "gitHead": "d84eedf0178aa98056cc03f7851dfae39f7fc90c",
  "homepage": "https://github.com/sindresorhus/type-fest#readme",
  "keywords": [
    "typescript",
    "ts",
    "types",
    "utility",
    "util",
    "utilities",
    "omit",
    "merge",
    "json"
  ],
  "license": "(MIT OR CC0-1.0)",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "type-fest",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n\t<br>\n\t<br>\n\t<img src=\"media/logo.svg\" alt=\"type-fest\" height=\"300\">\n\t<br>\n\t<br>\n\t<b>A collection of essential TypeScript types</b>\n\t<br>\n\t<hr>\n</div>\n<br>\n<br>\n\n[![Build Status](https://travis-ci.com/sindresorhus/type-fest.svg?branch=master)](https://travis-ci.com/sindresorhus/type-fest)\n[![](https://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4)\n<!-- Commented out until they actually show anything\n[![npm dependents](https://badgen.net/npm/dependents/type-fest)](https://www.npmjs.com/package/type-fest?activeTab=dependents) [![npm downloads](https://badgen.net/npm/dt/type-fest)](https://www.npmjs.com/package/type-fest)\n-->\n\nMany of the types here should have been built-in. You can help by suggesting some of them to the [TypeScript project](https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md).\n\nEither add this package as a dependency or copy-paste the needed types. No credit required. ðŸ‘Œ\n\nPR welcome for additional commonly needed types and docs improvements. Read the [contributing guidelines](.github/contributing.md) first.\n\n\n## Install\n\n```\n$ npm install type-fest\n```\n\n\n## Usage\n\n```ts\nimport {Omit} from 'type-fest';\n\ntype Foo = {\n\tunicorn: string;\n\trainbow: boolean;\n};\n\ntype FooWithoutRainbow = Omit<Foo, 'rainbow'>;\n//=> {unicorn: string}\n```\n\n\n## API\n\nSee the [types file](index.d.ts) for complete docs.\n\n### Basic\n\n- `Primitive` - Matches any [primitive value](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n- `Class` - Matches a [`class` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n- `TypedArray` - Matches any [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), like `Uint8Array` or `Float64Array`.\n- `JsonObject` - Matches a JSON object.\n- `JsonArray` - Matches a JSON array.\n- `JsonValue` - Matches any valid JSON value.\n- `ObservableLike` - Matches a value that is like an [Observable](https://github.com/tc39/proposal-observable).\n\n### Utilities\n\n- `Omit` - Create a type from an object type without certain keys.\n- `Merge` - Merge two types into a new type. Keys of the second type overrides keys of the first type.\n- `MergeExclusive` - Create a type that has mutually exclusive properties.\n- `RequireAtLeastOne` - Create a type that requires at least one of the given properties.\n- `LiteralUnion` - Allows creating a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union. Workaround for [Microsoft/TypeScript#29729](https://github.com/Microsoft/TypeScript/issues/29729).\n\n### Miscellaneous\n\n- `PackageJson` - Type for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file).\n\n\n## Declined types\n\n*If we decline a type addition, we will make sure to document the better solution here.*\n\n\n## Tips\n\n### Built-in types\n\nThere are many advanced types most users don't know about.\n\n- [`Partial<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1401-L1406) - Make all properties in `T` optional.\n- [`Required<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1408-L1413) - Make all properties in `T` required.\n- [`Readonly<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1415-L1420) - Make all properties in `T` readonly.\n- [`Pick<T, K>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1422-L1427) - From `T`, pick a set of properties whose keys are in the union `K`.\n- [`Record<K, T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1429-L1434) - Construct a type with a set of properties `K` of type `T`.\n- [`Exclude<T, U>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1436-L1439) - Exclude from `T` those types that are assignable to `U`.\n- [`Extract<T, U>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1441-L1444) - Extract from `T` those types that are assignable to `U`.\n- [`NonNullable<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1446-L1449) - Exclude `null` and `undefined` from `T`.\n- [`Parameters<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1451-L1454) - Obtain the parameters of a function type in a tuple.\n- [`ConstructorParameters<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1456-L1459) - Obtain the parameters of a constructor function type in a tuple.\n- [`ReturnType<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1461-L1464) â€“ Obtain the return type of a function type.\n- [`InstanceType<T>`](https://github.com/Microsoft/TypeScript/blob/2961bc3fc0ea1117d4e53bc8e97fa76119bc33e3/src/lib/es5.d.ts#L1466-L1469) â€“ Obtain the instance type of a constructor function type.\n\nYou can find some examples in the [TypeScript docs](https://www.typescriptlang.org/docs/handbook/advanced-types.html#predefined-conditional-types).\n\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Jarek Radosz](https://github.com/CvX)\n- [Dimitri Benin](https://github.com/BendingBender)\n\n\n## License\n\n(MIT OR CC0-1.0)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/type-fest.git"
  },
  "scripts": {
    "test": "xo && tsd"
  },
  "version": "0.3.1",
  "xo": {
    "extends": "xo-typescript",
    "extensions": [
      "ts"
    ],
    "rules": {
      "import/no-unresolved": "off"
    }
  }
}
